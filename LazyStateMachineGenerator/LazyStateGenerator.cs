using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.DotnetRuntime.Extensions;

namespace LazyStateMachineGenerator
{
    [Generator]
    internal class LazyStateGenerator : IIncrementalGenerator
    {
        private static readonly (string MethodName, string InterfaceName)[] MethodMappings =
        {
            ("OnEnter", "IOnEnter"),
            ("OnUpdate", "IOnUpdate"),
            ("OnFixedUpdate", "IOnFixedUpdate"),
            ("OnLateUpdate", "IOnLateUpdate"),
            ("OnExit", "IOnExit")
        };

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterPostInitializationOutput(static context =>
            {
                SourceBuilder sb = new();
                sb.UsingDirective("System");
                sb.InsertLine();

                using (sb.CreateNamespaceScope("LazyStateMachine"))
                {
                    sb.InsertLine("//===== AUTO GENERATE ATTRIBUTE ======");
                    sb.InsertLine("[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]");
                    using (sb.CreateClassScope("GenerateLazyStateAttribute : Attribute", "internal sealed")) { }
                }
                context.AddSource("GenerateLazyStateAttribute.g.cs", sb.ToString());
            });

            var source = context.SyntaxProvider.ForAttributeWithMetadataName(
                context,
                "LazyStateMachine.GenerateLazyStateAttribute",
                static (node, token) => true,
                static (context, token) => context)
                .Collect();

            context.RegisterSourceOutput(source, Emit);
        }

        private static void Emit(
     SourceProductionContext context,
     ImmutableArray<GeneratorAttributeSyntaxContext> contexts)
        {
            foreach (var item in contexts)
            {
                if (item.TargetSymbol is not INamedTypeSymbol classSymbol)
                    continue;

                var className = classSymbol.Name;
                var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();

                var baseType = classSymbol.BaseType;
                if (baseType == null
                    || baseType.Name != "State"
                    || baseType.ContainingType?.Name != "LazyStateMachine"
                    || baseType.ContainingType.TypeArguments.Length != 2)
                {
                    var descriptor = new DiagnosticDescriptor(
                        "LSS0001",
                        "Invalid Base Class",
                        $"{className} must inherit from LazyStateMachine<TContext,TEnum>.State",
                        "Usage",
                        DiagnosticSeverity.Error,
                        isEnabledByDefault: true);
                    context.ReportDiagnostic(
                        Diagnostic.Create(descriptor, classSymbol.Locations.First()));
                    continue;
                }

                var implementedIFaces = new HashSet<string>();
                foreach (var method in classSymbol.GetMembers().OfType<IMethodSymbol>())
                {
                    foreach (var (methodName, ifaceName) in MethodMappings)
                    {
                        if (method.Name == methodName)
                            implementedIFaces.Add(ifaceName);
                    }
                }

                if (implementedIFaces.Count == 0)
                    continue;

                var sb = new SourceBuilder();
                sb.UsingDirective("LazyStateMachine");
                sb.InsertLine();

                if (!classSymbol.ContainingNamespace.IsGlobalNamespace)
                {
                    using (sb.CreateNamespaceScope(namespaceName))
                        WritePartial();
                }
                else
                {
                    WritePartial();
                }

                context.AddSource($"{className}.LazyState.g.cs", sb.ToString());
                continue;

                void WritePartial()
                {
                    sb.InsertLine("// ===== AUTO-GENERATED by LazyStateGenerator =====");

                    using (sb.CreateClassScope(
                               $"{className} : {string.Join(", ", implementedIFaces)}",
                               "public partial"))
                    {
                        // empty
                    }
                }
            }
        }
    }
}
